// Copyright (c) The Thanos Authors.
// Licensed under the Apache License 2.0.

package dedup

import (
	"math"
	"testing"

	"github.com/efficientgo/core/testutil"
	"github.com/prometheus/prometheus/model/labels"
	"github.com/prometheus/prometheus/storage"
	"github.com/prometheus/prometheus/tsdb/chunkenc"
)

func TestIteratorEdgeCases(t *testing.T) {
	ms := NewMergedSeries(labels.Labels{}, []storage.Series{})
	it := ms.Iterator(nil)
	testutil.Ok(t, it.Err())
	testutil.Equals(t, int64(math.MinInt64), it.AtT())
	testutil.Equals(t, chunkenc.ValNone, it.Next())
	testutil.Ok(t, it.Err())
}

func TestMergedSeriesIterator(t *testing.T) {
	for _, tcase := range []struct {
		name      string
		input     []series
		exp       []series
		isCounter bool
	}{
		// copied from dedup_test.go to make sure the result is correct if no overlaps
		{
			name: "Single dedup label",
			input: []series{
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{60000, 3}, {70000, 4}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{200000, 5}, {210000, 6}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}, {Name: "d", Value: "4"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "4"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "2"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "2"}, {Name: "c", Value: "3"}},
					samples: []sample{{60000, 3}, {70000, 4}},
				},
			},
			exp: []series{
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}, {60000, 3}, {70000, 4}, {200000, 5}, {210000, 6}},
				},
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}, {Name: "d", Value: "4"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				},
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "4"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				},
				{
					lset:    labels.Labels{{Name: "a", Value: "2"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}, {60000, 3}, {70000, 4}},
				},
			},
		},
		{
			name: "Multi dedup label",
			input: []series{
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{60000, 3}, {70000, 4}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{200000, 5}, {210000, 6}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}, {Name: "d", Value: "4"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "4"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "2"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "2"}, {Name: "c", Value: "3"}},
					samples: []sample{{60000, 3}, {70000, 4}},
				},
			},
			exp: []series{
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}, {60000, 3}, {70000, 4}, {200000, 5}, {210000, 6}},
				},
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}, {Name: "d", Value: "4"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				},
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				},
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "4"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				},
				{
					lset:    labels.Labels{{Name: "a", Value: "2"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}, {60000, 3}, {70000, 4}},
				},
			},
		},
		{
			name: "Multi dedup label - some series don't have all dedup labels",
			input: []series{
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{60000, 3}, {70000, 4}},
				},
			},
			exp: []series{
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}, {60000, 3}, {70000, 4}},
				},
			},
		},
		// additional tests
		{
			name:  "empty",
			input: []series{},
			exp:   []series{},
		},
		{
			name: "Multi dedup labels - data points absent",
			input: []series{
				{
					lset:    labels.Labels{{Name: "a", Value: "5"}, {Name: "c", Value: "6"}},
					samples: []sample{{10000, 1}, {30000, 3}, {40000, 4}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "5"}, {Name: "c", Value: "6"}},
					samples: []sample{{10000, 1}, {20000, 2}, {30000, 3}, {50000, 5}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "5"}, {Name: "c", Value: "6"}},
					samples: []sample{{10000, 1}, {80000, 10}},
				},
			},
			exp: []series{
				{
					lset:    labels.Labels{{Name: "a", Value: "5"}, {Name: "c", Value: "6"}},
					samples: []sample{{10000, 1}, {20000, 2}, {30000, 3}, {40000, 4}, {50000, 5}, {80000, 10}},
				},
			},
		},
		{
			name: "Avoid corrupt Values",
			input: []series{
				{
					lset:    labels.Labels{{Name: "a", Value: "5"}, {Name: "c", Value: "6"}},
					samples: []sample{{10000, 1}, {20000, 23492}, {30000, 3}, {50000, 5}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "5"}, {Name: "c", Value: "6"}},
					samples: []sample{{10000, 1}, {20000, 2}, {30000, 3}, {50000, 5}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "5"}, {Name: "c", Value: "6"}},
					samples: []sample{{10000, 1}, {20000, 2}, {30000, 3}, {50000, 5}},
				},
				{
					lset:    labels.Labels{{Name: "b", Value: "5"}, {Name: "c", Value: "6"}},
					samples: []sample{{10000, 1}, {20000, 2}, {30000, 3}, {50000, 5}},
				}, {
					lset:    labels.Labels{{Name: "b", Value: "5"}, {Name: "c", Value: "6"}},
					samples: []sample{{10000, 1}, {20000, 2}, {30000, 3}, {50000, 5}},
				}, {
					lset:    labels.Labels{{Name: "b", Value: "5"}, {Name: "c", Value: "6"}},
					samples: []sample{{10000, 1}, {20000, 1234}, {30000, 3}, {50000, 5}},
				},
			},
			exp: []series{
				{
					lset:    labels.Labels{{Name: "a", Value: "5"}, {Name: "c", Value: "6"}},
					samples: []sample{{10000, 1}, {20000, 2}, {30000, 3}, {50000, 5}},
				},
				{
					lset:    labels.Labels{{Name: "b", Value: "5"}, {Name: "c", Value: "6"}},
					samples: []sample{{10000, 1}, {20000, 2}, {30000, 3}, {50000, 5}},
				},
			},
		},
		{
			name: "ignore sampling interval too small",
			input: []series{
				{
					lset: labels.Labels{{Name: "a", Value: "1"}},
					samples: []sample{
						{10000, 8.0},
						{20000, 9.0},
						{50001, 9 + 1.0},
						{60000, 9 + 2.0},
						{70000, 9 + 3.0},
						{80000, 9 + 4.0},
						{90000, 9 + 5.0},
						{100000, 9 + 6.0},
					},
				}, {
					lset: labels.Labels{{Name: "a", Value: "1"}},
					samples: []sample{
						{10001, 8.0}, // Penalty 5000 will be added.
						// 20001 was app reset. No sample, because stale marker but removed by downsample.CounterSeriesIterator. Penalty 2 * (20000 - 10000) will be added.
						// 30001 no sample. Within penalty, ignored.
						{45001, 8 + 1.0}, // Smaller timestamp, this will be chosen. CurrValue = 8.5 which is smaller than last chosen value.
						{55001, 8 + 2.0},
						{65001, 8 + 3.0},
						// {Gap} app reset. No sample, because stale marker but removed by downsample.CounterSeriesIterator.
					},
				},
			},
			exp: []series{
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}},
					samples: []sample{{10000, 8}, {20000, 9}, {45001, 9}, {50001, 10}, {55001, 10}, {65001, 11}, {80000, 13}, {90000, 14}, {100000, 15}},
				},
			},
		},
	} {
		t.Run(tcase.name, func(t *testing.T) {
			// If it is a counter then pass a function which expects a counter.
			dedupSet := NewSeriesSet(&mockedSeriesSet{series: tcase.input}, UseMergedSeries)
			var ats []storage.Series
			for dedupSet.Next() {
				ats = append(ats, dedupSet.At())
			}
			testutil.Ok(t, dedupSet.Err())
			testutil.Equals(t, len(tcase.exp), len(ats))

			for i, s := range ats {
				testutil.Equals(t, tcase.exp[i].lset, s.Labels(), "labels mismatch for series %v", i)
				res := expandSeries(t, s.Iterator(nil))
				testutil.Equals(t, tcase.exp[i].samples, res, "values mismatch for series :%v", i)
			}
		})
	}
}

func TestMergedSeriesIterator1(t *testing.T) {
	for _, tcase := range []struct {
		name  string
		input []series
	}{
		{
			name: "ES-1205037",
			input: []series{
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{1722022841086, 961}, {1722022871086, 1085}, {1722022901086, 1675}, {1722022931086, 1764}, {1722022961086, 2358}, {1722022991086, 2457}, {1722023021086, 3051}, {1722023051086, 3063}, {1722023081086, 3574}, {1722023111086, 3642}, {1722023141086, 4255}, {1722023171086, 4363}, {1722023201086, 4969}, {1722023231086, 5076}, {1722023261086, 5616}, {1722023291086, 5617}, {1722023321086, 6178}, {1722023351086, 6283}, {1722023381086, 6902}, {1722023411086, 7007}, {1722023441086, 7611}, {1722023471086, 8165}, {1722023501086, 8674}, {1722023531086, 8711}, {1722023561086, 9323}, {1722023591086, 9435}, {1722023621086, 10062}, {1722023651086, 10172}, {1722023681086, 10712}, {1722023711086, 10713}, {1722023741086, 11278}, {1722023771086, 11382}, {1722023801086, 11999}, {1722023831086, 12105}, {1722023861086, 12711}, {1722023891086, 12753}, {1722023921086, 13265}, {1722023951086, 13303}, {1722023981086, 13911}, {1722024011086, 14008}, {1722024041086, 14610}, {1722024071086, 14811}, {1722024101086, 15812}, {1722024131086, 15816}, {1722024161086, 16325}, {1722024191086, 16416}, {1722024221086, 17022}, {1722024251086, 17121}, {1722024281086, 17723}, {1722024311086, 17825}, {1722024341086, 18361}, {1722024371086, 18366}, {1722024401086, 18920}, {1722024431086, 19021}, {1722024461086, 19632}, {1722024491086, 19739}, {1722024521086, 20348}, {1722024551086, 20406}, {1722024581086, 20915}, {1722024611086, 20940}, {1722024641086, 21545}, {1722024671086, 21656}, {1722024701086, 22525}, {1722024731086, 22882}, {1722024761086, 23473}, {1722024791086, 23473}, {1722024821086, 23982}, {1722024851086, 24074}, {1722024881086, 24682}, {1722024911086, 24800}, {1722024941086, 25404}, {1722024971086, 25500}, {1722025001086, 26028}, {1722025031086, 26030}, {1722025061086, 26605}, {1722025091086, 26708}, {1722025121086, 27325}, {1722025151086, 27428}, {1722025181086, 28048}, {1722025211086, 28077}, {1722025241086, 28587}, {1722025271086, 28639}, {1722025301086, 29244}, {1722025331086, 29852}, {1722025361086, 30469}, {1722025391086, 30568}, {1722025421086, 31136}, {1722025451086, 31139}, {1722025481086, 31670}, {1722025511086, 31757}, {1722025541086, 32373}, {1722025571086, 32476}, {1722025601086, 33081}, {1722025631086, 33169}, {1722025661086, 33697}, {1722025691086, 33697}, {1722025721086, 34274}, {1722025751086, 34386}, {1722025781086, 35009}, {1722025811086, 35126}, {1722025841086, 35735}, {1722025871086, 35746}, {1722025901086, 36257}, {1722025931086, 36324}, {1722025961086, 37447}, {1722025991086, 37554}, {1722026021086, 38162}, {1722026051086, 38269}, {1722026081086, 38809}, {1722026111086, 38814}, {1722026141086, 39365}, {1722026171086, 39472}, {1722026201086, 40088}, {1722026231086, 40195}, {1722026261086, 40811}, {1722026291086, 40859}, {1722026321086, 41369}, {1722026351086, 41405}, {1722026381086, 42020}, {1722026411086, 42121}, {1722026441086, 42736}, {1722026471086, 42841}, {1722026501086, 43416}, {1722026531086, 43416}, {1722026561086, 44061}, {1722026591086, 44540}, {1722026621086, 45152}, {1722026651086, 45254}, {1722026681086, 45864}, {1722026711186, 45961}, {1722026741086, 46481}, {1722026771086, 46481}, {1722026801086, 47058}, {1722026831086, 47164}, {1722026861086, 47780}, {1722026891086, 47876}, {1722026921086, 48489}, {1722026951086, 48527}, {1722026981086, 49037}, {1722027011086, 49077}, {1722027041086, 49691}, {1722027071086, 49791}, {1722027101086, 50404}, {1722027131086, 50510}, {1722027161086, 51084}, {1722027191086, 51473}, {1722027221086, 52129}, {1722027251086, 52225}, {1722027281086, 52843}, {1722027311086, 52944}, {1722027341086, 53564}, {1722027371086, 53645}, {1722027401086, 54155}, {1722027431086, 54160}, {1722027461086, 54761}, {1722027491086, 54867}, {1722027521086, 55484}, {1722027551086, 55599}, {1722027581086, 56198}, {1722027611186, 56200}, {1722027641086, 56710}, {1722027671086, 56791}, {1722027701086, 57403}, {1722027731086, 57506}, {1722027761086, 58113}, {1722027791086, 58211}, {1722027821086, 59265}, {1722027851086, 59265}, {1722027881086, 59819}, {1722027911086, 59916}, {1722027941086, 60529}, {1722027971086, 60635}, {1722028001086, 61247}, {1722028031086, 61311}, {1722028061086, 61821}, {1722028091086, 61842}, {1722028121086, 62437}, {1722028151086, 62535}, {1722028181086, 63149}, {1722028211086, 63236}, {1722028241086, 63843}, {1722028271086, 63868}, {1722028301086, 64378}, {1722028331086, 64426}, {1722028361086, 65027}, {1722028391086, 65129}, {1722028421086, 65763}, {1722028451086, 66357}, {1722028481086, 66934}, {1722028511086, 66934}, {1722028541086, 67466}, {1722028571086, 67557}, {1722028601086, 68181}, {1722028631086, 68276}, {1722028661086, 68894}, {1722028691086, 68981}, {1722028721086, 69491}, {1722028751086, 69491}, {1722028781086, 70094}, {1722028811086, 70193}, {1722028841086, 70816}, {1722028871086, 70914}, {1722028901086, 71521}, {1722029021086, 116}, {1722029051086, 1087}, {1722029081086, 1529}, {1722029111086, 1780}, {1722029141086, 2247}, {1722029171086, 2480}, {1722029201086, 2931}, {1722029231086, 3069}, {1722029261086, 3477}, {1722029291086, 3671}, {1722029321086, 4165}, {1722029351086, 4392}, {1722029381086, 4890}, {1722029411086, 5087}, {1722029441086, 5498}, {1722029471086, 5623}, {1722029501086, 6045}, {1722029531086, 6276}, {1722029561086, 6765}, {1722029591086, 6975}, {1722029621086, 7449}, {1722029651086, 7836}, {1722029681086, 8564}, {1722029711086, 8691}, {1722029741086, 9165}, {1722029771086, 9373}, {1722029801086, 9889}, {1722029831086, 10086}, {1722029861086, 10582}, {1722029891086, 10742}, {1722029921086, 11145}, {1722029951086, 11289}, {1722029981086, 11778}, {1722030011086, 11990}, {1722030041086, 12482}, {1722030071086, 12709}, {1722030101086, 13186}, {1722030131086, 13297}, {1722030161086, 13720}, {1722030191086, 13904}, {1722030221086, 14399}, {1722030251086, 14628}, {1722030281086, 15444}, {1722030311086, 15843}, {1722030341086, 16251}, {1722030371086, 16366}, {1722030401086, 16811}, {1722030431086, 17031}, {1722030461086, 17533}, {1722030491086, 17728}, {1722030521086, 18205}, {1722030551086, 18410}, {1722030581086, 18831}, {1722030611086, 18921}, {1722030641086, 19405}, {1722030671086, 19621}, {1722030701086, 20152}, {1722030731086, 20347}, {1722030761086, 20849}, {1722030791086, 20967}, {1722030821086, 21381}, {1722030851086, 21549}, {1722030881086, 22065}, {1722030911086, 22785}, {1722030941086, 23275}, {1722030971086, 23500}, {1722031001086, 23953}, {1722031031086, 24033}, {1722031061086, 24493}, {1722031091086, 24710}, {1722031121086, 25232}, {1722031151086, 25425}, {1722031181086, 25913}, {1722031211086, 26078}, {1722031241086, 26441}, {1722031271086, 26623}, {1722031301086, 27116}, {1722031331086, 27330}, {1722031361086, 27838}, {1722031391086, 28047}, {1722031421086, 28505}, {1722031451086, 28637}, {1722031481086, 29065}, {1722031511086, 29237}, {1722031541086, 30276}, {1722031571086, 30456}, {1722031601086, 30950}, {1722031631086, 31163}, {1722031661086, 31604}, {1722031691086, 31704}, {1722031721086, 32146}, {1722031751086, 32348}, {1722031781086, 32852}, {1722031811086, 33055}, {1722031841086, 33546}, {1722031871086, 33745}, {1722031901086, 34151}, {1722031931086, 34263}, {1722031961086, 34726}, {1722031991086, 34927}, {1722032021086, 35436}, {1722032051086, 35632}, {1722032081086, 36165}, {1722032111086, 36307}, {1722032141086, 36857}, {1722032171086, 37350}, {1722032201086, 37832}, {1722032411086, 39982}, {1722032441086, 40487}, {1722032471086, 40707}, {1722032591086, 41925}, {1722032621086, 42414}, {1722032651086, 42606}, {1722032681086, 43129}, {1722032711086, 43322}, {1722032741086, 43836}, {1722032771086, 44464}, {1722032801086, 44862}, {1722032831086, 45043}, {1722032861086, 45552}, {1722032891086, 45752}, {1722032921086, 46269}, {1722032951086, 46463}, {1722032981086, 46933}, {1722033011086, 47035}, {1722033041086, 47455}, {1722033071086, 47659}, {1722033101086, 48168}, {1722033131086, 48374}, {1722033161086, 48888}, {1722033191086, 49071}, {1722033221086, 49425}, {1722033251086, 49592}, {1722033281086, 50061}, {1722033311086, 50278}, {1722033341086, 50791}, {1722033371086, 51002}, {1722033401086, 52024}, {1722033431086, 52153}, {1722033461086, 52580}, {1722033491086, 52704}, {1722033521086, 53202}, {1722033551086, 53409}, {1722033581086, 53919}, {1722033611086, 54131}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{1722022841086, 961}, {1722022871086, 1085}, {1722022901086, 1675}, {1722022931086, 1764}, {1722022961086, 2358}, {1722022991086, 2457}, {1722023021086, 3051}, {1722023051086, 3063}, {1722023081086, 3574}, {1722023111086, 3642}, {1722023141086, 4255}, {1722023171086, 4363}, {1722023201086, 4969}, {1722023231086, 5076}, {1722023261086, 5616}, {1722023291086, 5617}, {1722023321086, 6178}, {1722023351086, 6283}, {1722023381086, 6902}, {1722023411086, 7007}, {1722023441086, 7611}, {1722023471086, 8165}, {1722023501086, 8674}, {1722023531086, 8711}, {1722023561086, 9323}, {1722023591086, 9435}, {1722023621086, 10062}, {1722023651086, 10172}, {1722023681086, 10712}, {1722023711086, 10713}, {1722023741086, 11278}, {1722023771086, 11382}, {1722023801086, 11999}, {1722023831086, 12105}, {1722023861086, 12711}, {1722023891086, 12753}, {1722023921086, 13265}, {1722023951086, 13303}, {1722023981086, 13911}, {1722024011086, 14008}, {1722024041086, 14610}, {1722024071086, 14811}, {1722024101086, 15812}, {1722024131086, 15816}, {1722024161086, 16325}, {1722024191086, 16416}, {1722024221086, 17022}, {1722024251086, 17121}, {1722024281086, 17723}, {1722024311086, 17825}, {1722024341086, 18361}, {1722024371086, 18366}, {1722024401086, 18920}, {1722024431086, 19021}, {1722024461086, 19632}, {1722024491086, 19739}, {1722024521086, 20348}, {1722024551086, 20406}, {1722024581086, 20915}, {1722024611086, 20940}, {1722024641086, 21545}, {1722024671086, 21656}, {1722024701086, 22525}, {1722024731086, 22882}, {1722024761086, 23473}, {1722024791086, 23473}, {1722024821086, 23982}, {1722024851086, 24074}, {1722024881086, 24682}, {1722024911086, 24800}, {1722024941086, 25404}, {1722024971086, 25500}, {1722025001086, 26028}, {1722025031086, 26030}, {1722025061086, 26605}, {1722025091086, 26708}, {1722025121086, 27325}, {1722025151086, 27428}, {1722025181086, 28048}, {1722025211086, 28077}, {1722025241086, 28587}, {1722025271086, 28639}, {1722025301086, 29244}, {1722025331086, 29852}, {1722025361086, 30469}, {1722025391086, 30568}, {1722025421086, 31136}, {1722025451086, 31139}, {1722025481086, 31670}, {1722025511086, 31757}, {1722025541086, 32373}, {1722025571086, 32476}, {1722025601086, 33081}, {1722025631086, 33169}, {1722025661086, 33697}, {1722025691086, 33697}, {1722025721086, 34274}, {1722025751086, 34386}, {1722025781086, 35009}, {1722025811086, 35126}, {1722025841086, 35735}, {1722025871086, 35746}, {1722025901086, 36257}, {1722025931086, 36324}, {1722025961086, 37447}, {1722025991086, 37554}, {1722026021086, 38162}, {1722026051086, 38269}, {1722026081086, 38809}, {1722026111086, 38814}, {1722026141086, 39365}, {1722026171086, 39472}, {1722026201086, 40088}, {1722026231086, 40195}, {1722026261086, 40811}, {1722026291086, 40859}, {1722026321086, 41369}, {1722026351086, 41405}, {1722026381086, 42020}, {1722026411086, 42121}, {1722026441086, 42736}, {1722026471086, 42841}, {1722026501086, 43416}, {1722026531086, 43416}, {1722026561086, 44061}, {1722026591086, 44540}, {1722026621086, 45152}, {1722026651086, 45254}, {1722026681086, 45864}, {1722026711186, 45961}, {1722026741086, 46481}, {1722026771086, 46481}, {1722026801086, 47058}, {1722026831086, 47164}, {1722026861086, 47780}, {1722026891086, 47876}, {1722026921086, 48489}, {1722026951086, 48527}, {1722026981086, 49037}, {1722027011086, 49077}, {1722027041086, 49691}, {1722027071086, 49791}, {1722027101086, 50404}, {1722027131086, 50510}, {1722027161086, 51084}, {1722027191086, 51473}, {1722027221086, 52129}, {1722027251086, 52225}, {1722027281086, 52843}, {1722027311086, 52944}, {1722027341086, 53564}, {1722027371086, 53645}, {1722027401086, 54155}, {1722027431086, 54160}, {1722027461086, 54761}, {1722027491086, 54867}, {1722027521086, 55484}, {1722027551086, 55599}, {1722027581086, 56198}, {1722027611186, 56200}, {1722027641086, 56710}, {1722027671086, 56791}, {1722027701086, 57403}, {1722027731086, 57506}, {1722027761086, 58113}, {1722027791086, 58211}, {1722027821086, 59265}, {1722027851086, 59265}, {1722027881086, 59819}, {1722027911086, 59916}, {1722027941086, 60529}, {1722027971086, 60635}, {1722028001086, 61247}, {1722028031086, 61311}, {1722028061086, 61821}, {1722028091086, 61842}, {1722028121086, 62437}, {1722028151086, 62535}, {1722028181086, 63149}, {1722028211086, 63236}, {1722028241086, 63843}, {1722028271086, 63868}, {1722028301086, 64378}, {1722028331086, 64426}, {1722028361086, 65027}, {1722028391086, 65129}, {1722028421086, 65763}, {1722028451086, 66357}, {1722028481086, 66934}, {1722028511086, 66934}, {1722028541086, 67466}, {1722028571086, 67557}, {1722028601086, 68181}, {1722028631086, 68276}, {1722028661086, 68894}, {1722028691086, 68981}, {1722028721086, 69491}, {1722028751086, 69491}, {1722028781086, 70094}, {1722028811086, 70193}, {1722028841086, 70816}, {1722028871086, 70914}, {1722028901086, 71521}, {1722029021086, 116}, {1722029051086, 1087}, {1722029081086, 1529}, {1722029111086, 1780}, {1722029141086, 2247}, {1722029171086, 2480}, {1722029201086, 2931}, {1722029231086, 3069}, {1722029261086, 3477}, {1722029291086, 3671}, {1722029321086, 4165}, {1722029351086, 4392}, {1722029381086, 4890}, {1722029411086, 5087}, {1722029441086, 5498}, {1722029471086, 5623}, {1722029501086, 6045}, {1722029531086, 6276}, {1722029561086, 6765}, {1722029591086, 6975}, {1722029621086, 7449}, {1722029651086, 7836}, {1722029681086, 8564}, {1722029711086, 8691}, {1722029741086, 9165}, {1722029771086, 9373}, {1722029801086, 9889}, {1722029831086, 10086}, {1722029861086, 10582}, {1722029891086, 10742}, {1722029921086, 11145}, {1722029951086, 11289}, {1722029981086, 11778}, {1722030011086, 11990}, {1722030041086, 12482}, {1722030071086, 12709}, {1722030101086, 13186}, {1722030131086, 13297}, {1722030161086, 13720}, {1722030191086, 13904}, {1722030221086, 14399}, {1722030251086, 14628}, {1722030281086, 15444}, {1722030311086, 15843}, {1722030341086, 16251}, {1722030371086, 16366}, {1722030401086, 16811}, {1722030431086, 17031}, {1722030461086, 17533}, {1722030491086, 17728}, {1722030521086, 18205}, {1722030551086, 18410}, {1722030581086, 18831}, {1722030611086, 18921}, {1722030641086, 19405}, {1722030671086, 19621}, {1722030701086, 20152}, {1722030731086, 20347}, {1722030761086, 20849}, {1722030791086, 20967}, {1722030821086, 21381}, {1722030851086, 21549}, {1722030881086, 22065}, {1722030911086, 22785}, {1722030941086, 23275}, {1722030971086, 23500}, {1722031001086, 23953}, {1722031031086, 24033}, {1722031061086, 24493}, {1722031091086, 24710}, {1722031121086, 25232}, {1722031151086, 25425}, {1722031181086, 25913}, {1722031211086, 26078}, {1722031241086, 26441}, {1722031271086, 26623}, {1722031301086, 27116}, {1722031331086, 27330}, {1722031361086, 27838}, {1722031391086, 28047}, {1722031421086, 28505}, {1722031451086, 28637}, {1722031481086, 29065}, {1722031511086, 29237}, {1722031541086, 30276}, {1722031571086, 30456}, {1722031601086, 30950}, {1722031631086, 31163}, {1722031661086, 31604}, {1722031691086, 31704}, {1722031721086, 32146}, {1722031751086, 32348}, {1722031781086, 32852}, {1722031811086, 33055}, {1722031841086, 33546}, {1722031871086, 33745}, {1722031901086, 34151}, {1722031931086, 34263}, {1722031961086, 34726}, {1722031991086, 34927}, {1722032021086, 35436}, {1722032051086, 35632}, {1722032081086, 36165}, {1722032111086, 36307}, {1722032141086, 36857}, {1722032171086, 37350}, {1722032201086, 37832}, {1722032231086, 38063}, {1722032261086, 38555}, {1722032291086, 38783}, {1722032321086, 39270}, {1722032351086, 39370}, {1722032381086, 39789}, {1722032411086, 39982}, {1722032441086, 40487}, {1722032471086, 40707}, {1722032501086, 41196}, {1722032531086, 41405}, {1722032561086, 41829}, {1722032591086, 41925}, {1722032621086, 42414}, {1722032651086, 42606}, {1722032681086, 43129}, {1722032711086, 43322}, {1722032741086, 43836}, {1722032771086, 44464}, {1722032801086, 44862}, {1722032831086, 45043}, {1722032861086, 45552}, {1722032891086, 45752}, {1722032921086, 46269}, {1722032951086, 46463}, {1722032981086, 46933}, {1722033011086, 47035}, {1722033041086, 47455}, {1722033071086, 47659}, {1722033101086, 48168}, {1722033131086, 48374}, {1722033161086, 48888}, {1722033191086, 49071}, {1722033221086, 49425}, {1722033251086, 49592}, {1722033281086, 50061}, {1722033311086, 50278}, {1722033341086, 50791}, {1722033371086, 51002}, {1722033401086, 52024}, {1722033431086, 52153}, {1722033461086, 52580}, {1722033491086, 52704}, {1722033521086, 53202}, {1722033551086, 53409}, {1722033581086, 53919}, {1722033611086, 54131}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{1722022841086, 961}, {1722022871086, 1085}, {1722022901086, 1675}, {1722022931086, 1764}, {1722022961086, 2358}, {1722022991086, 2457}, {1722023021086, 3051}, {1722023051086, 3063}, {1722023081086, 3574}, {1722023111086, 3642}, {1722023141086, 4255}, {1722023171086, 4363}, {1722023201086, 4969}, {1722023231086, 5076}, {1722023261086, 5616}, {1722023291086, 5617}, {1722023321086, 6178}, {1722023351086, 6283}, {1722023381086, 6902}, {1722023411086, 7007}, {1722023441086, 7611}, {1722023471086, 8165}, {1722023501086, 8674}, {1722023531086, 8711}, {1722023561086, 9323}, {1722023591086, 9435}, {1722023621086, 10062}, {1722023651086, 10172}, {1722023681086, 10712}, {1722023711086, 10713}, {1722023741086, 11278}, {1722023771086, 11382}, {1722023801086, 11999}, {1722023831086, 12105}, {1722023861086, 12711}, {1722023891086, 12753}, {1722023921086, 13265}, {1722023951086, 13303}, {1722023981086, 13911}, {1722024011086, 14008}, {1722024041086, 14610}, {1722024071086, 14811}, {1722024101086, 15812}, {1722024131086, 15816}, {1722024161086, 16325}, {1722024191086, 16416}, {1722024221086, 17022}, {1722024251086, 17121}, {1722024281086, 17723}, {1722024311086, 17825}, {1722024341086, 18361}, {1722024371086, 18366}, {1722024401086, 18920}, {1722024431086, 19021}, {1722024461086, 19632}, {1722024491086, 19739}, {1722024521086, 20348}, {1722024551086, 20406}, {1722024581086, 20915}, {1722024611086, 20940}, {1722024641086, 21545}, {1722024671086, 21656}, {1722024701086, 22525}, {1722024731086, 22882}, {1722024761086, 23473}, {1722024791086, 23473}, {1722024821086, 23982}, {1722024851086, 24074}, {1722024881086, 24682}, {1722024911086, 24800}, {1722024941086, 25404}, {1722024971086, 25500}, {1722025001086, 26028}, {1722025031086, 26030}, {1722025061086, 26605}, {1722025091086, 26708}, {1722025121086, 27325}, {1722025151086, 27428}, {1722025181086, 28048}, {1722025211086, 28077}, {1722025241086, 28587}, {1722025271086, 28639}, {1722025301086, 29244}, {1722025331086, 29852}, {1722025361086, 30469}, {1722025391086, 30568}, {1722025421086, 31136}, {1722025451086, 31139}, {1722025481086, 31670}, {1722025511086, 31757}, {1722025541086, 32373}, {1722025571086, 32476}, {1722025601086, 33081}, {1722025631086, 33169}, {1722025661086, 33697}, {1722025691086, 33697}, {1722025721086, 34274}, {1722025751086, 34386}, {1722025781086, 35009}, {1722025811086, 35126}, {1722025841086, 35735}, {1722025871086, 35746}, {1722025901086, 36257}, {1722025931086, 36324}, {1722025961086, 37447}, {1722025991086, 37554}, {1722026021086, 38162}, {1722026051086, 38269}, {1722026081086, 38809}, {1722026111086, 38814}, {1722026141086, 39365}, {1722026171086, 39472}, {1722026201086, 40088}, {1722026231086, 40195}, {1722026261086, 40811}, {1722026291086, 40859}, {1722026321086, 41369}, {1722026351086, 41405}, {1722026381086, 42020}, {1722026411086, 42121}, {1722026441086, 42736}, {1722026471086, 42841}, {1722026501086, 43416}, {1722026531086, 43416}, {1722026561086, 44061}, {1722026591086, 44540}, {1722026621086, 45152}, {1722026651086, 45254}, {1722026681086, 45864}, {1722026711186, 45961}, {1722026741086, 46481}, {1722026771086, 46481}, {1722026801086, 47058}, {1722026831086, 47164}, {1722026861086, 47780}, {1722026891086, 47876}, {1722026921086, 48489}, {1722026951086, 48527}, {1722026981086, 49037}, {1722027011086, 49077}, {1722027041086, 49691}, {1722027071086, 49791}, {1722027101086, 50404}, {1722027131086, 50510}, {1722027161086, 51084}, {1722027191086, 51473}, {1722027221086, 52129}, {1722027251086, 52225}, {1722027281086, 52843}, {1722027311086, 52944}, {1722027341086, 53564}, {1722027371086, 53645}, {1722027401086, 54155}, {1722027431086, 54160}, {1722027461086, 54761}, {1722027491086, 54867}, {1722027521086, 55484}, {1722027551086, 55599}, {1722027581086, 56198}, {1722027611186, 56200}, {1722027641086, 56710}, {1722027671086, 56791}, {1722027701086, 57403}, {1722027731086, 57506}, {1722027761086, 58113}, {1722027791086, 58211}, {1722027821086, 59265}, {1722027851086, 59265}, {1722027881086, 59819}, {1722027911086, 59916}, {1722027941086, 60529}, {1722027971086, 60635}, {1722028001086, 61247}, {1722028031086, 61311}, {1722028061086, 61821}, {1722028091086, 61842}, {1722028121086, 62437}, {1722028151086, 62535}, {1722028181086, 63149}, {1722028211086, 63236}, {1722028241086, 63843}, {1722028271086, 63868}, {1722028301086, 64378}, {1722028331086, 64426}, {1722028361086, 65027}, {1722028391086, 65129}, {1722028421086, 65763}, {1722028451086, 66357}, {1722028481086, 66934}, {1722028511086, 66934}, {1722028541086, 67466}, {1722028571086, 67557}, {1722028601086, 68181}, {1722028631086, 68276}, {1722028661086, 68894}, {1722028691086, 68981}, {1722028721086, 69491}, {1722028751086, 69491}, {1722028781086, 70094}, {1722028811086, 70193}, {1722028841086, 70816}, {1722028871086, 70914}, {1722028901086, 71521}, {1722029021086, 116}, {1722029051086, 1087}, {1722029081086, 1529}, {1722029111086, 1780}, {1722029141086, 2247}, {1722029171086, 2480}, {1722029201086, 2931}, {1722029231086, 3069}, {1722029261086, 3477}, {1722029291086, 3671}, {1722029321086, 4165}, {1722029351086, 4392}, {1722029381086, 4890}, {1722029411086, 5087}, {1722029441086, 5498}, {1722029471086, 5623}, {1722029501086, 6045}, {1722029531086, 6276}, {1722029561086, 6765}, {1722029591086, 6975}, {1722029621086, 7449}, {1722029651086, 7836}, {1722029681086, 8564}, {1722029711086, 8691}, {1722029741086, 9165}, {1722029771086, 9373}, {1722029801086, 9889}, {1722029831086, 10086}, {1722029861086, 10582}, {1722029891086, 10742}, {1722029921086, 11145}, {1722029951086, 11289}, {1722029981086, 11778}, {1722030011086, 11990}, {1722030041086, 12482}, {1722030071086, 12709}, {1722030101086, 13186}, {1722030131086, 13297}, {1722030161086, 13720}, {1722030191086, 13904}, {1722030221086, 14399}, {1722030251086, 14628}, {1722030281086, 15444}, {1722030311086, 15843}, {1722030341086, 16251}, {1722030371086, 16366}, {1722030401086, 16811}, {1722030431086, 17031}, {1722030461086, 17533}, {1722030491086, 17728}, {1722030521086, 18205}, {1722030551086, 18410}, {1722030581086, 18831}, {1722030611086, 18921}, {1722030641086, 19405}, {1722030671086, 19621}, {1722030701086, 20152}, {1722030731086, 20347}, {1722030761086, 20849}, {1722030791086, 20967}, {1722030821086, 21381}, {1722030851086, 21549}, {1722030881086, 22065}, {1722030911086, 22785}, {1722030941086, 23275}, {1722030971086, 23500}, {1722031001086, 23953}, {1722031031086, 24033}, {1722031061086, 24493}, {1722031091086, 24710}, {1722031121086, 25232}, {1722031151086, 25425}, {1722031181086, 25913}, {1722031211086, 26078}, {1722031241086, 26441}, {1722031271086, 26623}, {1722031301086, 27116}, {1722031331086, 27330}, {1722031361086, 27838}, {1722031391086, 28047}, {1722031421086, 28505}, {1722031451086, 28637}, {1722031481086, 29065}, {1722031511086, 29237}, {1722031541086, 30276}, {1722031571086, 30456}, {1722031601086, 30950}, {1722031631086, 31163}, {1722031661086, 31604}, {1722031691086, 31704}, {1722031721086, 32146}, {1722031751086, 32348}, {1722031781086, 32852}, {1722031811086, 33055}, {1722031841086, 33546}, {1722031871086, 33745}, {1722031901086, 34151}, {1722031931086, 34263}, {1722031961086, 34726}, {1722031991086, 34927}, {1722032021086, 35436}, {1722032051086, 35632}, {1722032081086, 36165}, {1722032111086, 36307}, {1722032141086, 36857}, {1722032171086, 37350}, {1722032201086, 37832}, {1722032231086, 38063}, {1722032261086, 38555}, {1722032291086, 38783}, {1722032321086, 39270}, {1722032351086, 39370}, {1722032381086, 39789}, {1722032411086, 39982}, {1722032441086, 40487}, {1722032471086, 40707}, {1722032501086, 41196}, {1722032531086, 41405}, {1722032561086, 41829}, {1722032591086, 41925}, {1722032621086, 42414}, {1722032651086, 42606}, {1722032681086, 43129}, {1722032711086, 43322}, {1722032741086, 43836}, {1722032771086, 44464}, {1722032801086, 44862}, {1722032831086, 45043}, {1722032861086, 45552}, {1722032891086, 45752}, {1722032921086, 46269}, {1722032951086, 46463}, {1722032981086, 46933}, {1722033011086, 47035}, {1722033041086, 47455}, {1722033071086, 47659}, {1722033101086, 48168}, {1722033131086, 48374}, {1722033161086, 48888}, {1722033191086, 49071}, {1722033221086, 49425}, {1722033251086, 49592}, {1722033281086, 50061}, {1722033311086, 50278}, {1722033341086, 50791}, {1722033371086, 51002}, {1722033401086, 52024}, {1722033431086, 52153}, {1722033461086, 52580}, {1722033491086, 52704}, {1722033521086, 53202}, {1722033551086, 53409}, {1722033581086, 53919}, {1722033611086, 54131}},
				},
			},
		},
	} {
		t.Run(tcase.name, func(t *testing.T) {
			// If it is a counter then pass a function which expects a counter.
			dedupSet := NewSeriesSet(&mockedSeriesSet{series: tcase.input}, UseMergedSeries)
			var ats []storage.Series
			for dedupSet.Next() {
				ats = append(ats, dedupSet.At())
			}
			testutil.Ok(t, dedupSet.Err())
			for i, s := range ats {
				res := expandSeries(t, s.Iterator(nil))
				if len(res) == 0 {
					continue
				}
				last := res[0].f
				for j, tf := range res {
					testutil.Equals(t, true, tf.f >= last, "counter not mono increase after merge at index [%v, %v], [i, j-1] %v, [i, j] %v", i, j, last, tf.f)
					last = tf.f
				}
			}
		})
	}
}
